from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from ruSpamLib import is_spam
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import json
import os

bot = Bot(token="7311526472:AAExrmlPJiDXVWZHHTtn1R9MazUURj1Tdfo")
dp = Dispatcher()

LOG_CHANNELS_DB = "home/log_channels.json"
MODELS_DB = "home/models.json"
THRESHOLDS_DB = "home/thresholds.json"
USER_MESSAGES_DB = "home/user_messages.json"

SPECIAL_USER_IDS = [7264930816, 1529997307]

def load_data(db_file):
    if os.path.exists(db_file):
        with open(db_file, "r") as file:
            return json.load(file)
    return {}

def save_data(db_file, data):
    with open(db_file, "w") as file:
        json.dump(data, file)

log_channels = load_data(LOG_CHANNELS_DB)
models = load_data(MODELS_DB)
thresholds = load_data(THRESHOLDS_DB)
user_messages = load_data(USER_MESSAGES_DB)

@dp.message(Command('start'))
async def process_start_command(message: Message):
    start_message = await message.answer(
        f'<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}</b>\n\n'
        '–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ —è –±—É–¥—É —É–¥–∞–ª—è—Ç—å –≤—Å–µ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n'
        '–¢–∞–∫ –∂–µ —É –º–µ–Ω—è –µ—Å—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Ç–µ–±–µ –æ—Ç–∫—Ä–æ—é—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n\n'
        '–£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n\n'
        '<i>–ê–¥–º–∏–Ω—ã: @FlorikX, @NeuroSpaceX</i>\n\n'
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.',
        parse_mode='html'
    )
    dp['start_message_id'] = start_message.message_id

@dp.message(Command('info'))
async def process_info_command(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    member = await bot.get_chat_member(chat_id, user_id)
    if not await has_permission(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥-–∫–∞–Ω–∞–ª.")
        return

    log_channel_id = log_channels.get(str(chat_id), "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    model_name = models.get(str(chat_id), "spamNS_large_v1")
    threshold = thresholds.get(str(chat_id), 10)

    info_text = (
        f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã:</b> {message.chat.title}\n\n"
        f"<b>–õ–æ–≥-–∫–∞–Ω–∞–ª:</b> {log_channel_id}\n"
        f"<b>–ú–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b> {model_name}\n"
        f"<b>–ü–æ—Ä–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {threshold}\n"
    )
    await message.reply(info_text, parse_mode='html')

@dp.message(Command('help'))
async def process_help_command(message: Message):
    help_text = (
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ —è –±—É–¥—É —É–¥–∞–ª—è—Ç—å –≤—Å–µ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/setlog channel_id - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥-–∫–∞–Ω–∞–ª. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø–µ. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ "
        f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {', '.join(map(str, SPECIAL_USER_IDS))} –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥-–∫–∞–Ω–∞–ª.\n"
        "/setmodel model_name - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø–µ. –¢–æ–ª—å–∫–æ "
        f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {', '.join(map(str, SPECIAL_USER_IDS))} –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n"
        "/setthreshold threshold - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø–µ. –¢–æ–ª—å–∫–æ "
        f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {', '.join(map(str, SPECIAL_USER_IDS))} –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n"
        "1. spamNS_large_v1\n"
        "2. spamNS_tiny_v1\n"
        "3. spamNS_v1\n"
        "4. spamNS_large_v2\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω—ã 4 –º–æ–¥–µ–ª–∏. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.\n\n"
        "<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:</b>\n"
        "–ë–æ—Ç, –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω—ã: @NeuroSpaceX\n"
        "–ü–æ–º–æ—â—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: @FlorikX\n\n"
        "–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.\n\n"
        "<b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
        "totoshkus@gmail.com\n\n"
    )

    await message.answer(help_text, parse_mode='html')

async def has_permission(message: Message) -> bool:
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    return (message.from_user.id in SPECIAL_USER_IDS) or (member.is_chat_admin() or member.is_chat_creator())

@dp.message(Command('setlog'))
async def process_setlog_command(message: Message):
    if not message.chat.type in ['group', 'supergroup']:
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø–µ.")
        return

    if not await has_permission(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥-–∫–∞–Ω–∞–ª.")
        return

    chat_id = message.chat.id
    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /setlog <channel_id>")
        return

    log_channel_id = parts[1]
    log_channels[str(chat_id)] = log_channel_id
    save_data(LOG_CHANNELS_DB, log_channels)
    await message.reply(f"–õ–æ–≥-–∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {log_channel_id}")

@dp.message(Command('setmodel'))
async def process_setmodel_command(message: Message):
    if not message.chat.type in ['group', 'supergroup']:
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø–µ.")
        return

    if not await has_permission(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
        return

    chat_id = message.chat.id
    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /setmodel <model_name>")
        return

    model_name = parts[1]
    models[str(chat_id)] = model_name
    save_data(MODELS_DB, models)
    await message.reply(f"–ú–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model_name}")

@dp.message(Command('getdata'))
async def process_getdata_command(message: Message):
    if message.from_user.id not in SPECIAL_USER_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    log_channels_data = json.dumps(log_channels, indent=4, ensure_ascii=False)
    models_data = json.dumps(models, indent=4, ensure_ascii=False)
    thresholds_data = json.dumps(thresholds, indent=4, ensure_ascii=False)
    user_messages_data = json.dumps(user_messages, indent=4, ensure_ascii=False)

    response_text = (
        f"<b>–î–∞–Ω–Ω—ã–µ –ª–æ–≥-–∫–∞–Ω–∞–ª–æ–≤:</b>\n<pre>{log_channels_data}</pre>\n\n"
        f"<b>–î–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π:</b>\n<pre>{models_data}</pre>\n\n"
        f"<b>–î–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n<pre>{thresholds_data}</pre>\n\n"
        f"<b>–î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n<pre>{user_messages_data}</pre>"
    )

    await message.reply(response_text, parse_mode='html')

@dp.message(Command('setthreshold'))
async def process_setthreshold_command(message: Message):
    if not message.chat.type in ['group', 'supergroup']:
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä-–≥—Ä—É–ø–ø–µ.")
        return

    if not await has_permission(message):
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    chat_id = message.chat.id
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /setthreshold <threshold>")
        return

    threshold = int(parts[1])
    thresholds[str(chat_id)] = threshold
    save_data(THRESHOLDS_DB, thresholds)
    await message.reply(f"–ü–æ—Ä–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {threshold}")

@dp.callback_query()
async def process_callback_query(callback_query: CallbackQuery):
    start_message_id = dp.get('start_message_id')
    data = callback_query.data
    if data == 'button':
        await bot.delete_message(chat_id=callback_query.from_user.id, message_id=start_message_id)
        await bot.send_message(callback_query.from_user.id, "<b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—åüëÄ</b>\n\n–°–µ–π—á–∞—Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", parse_mode='html')

    if callback_query.data.startswith('ban_'):
        user_id, chat_id = map(int, callback_query.data.split('_')[1:])
        print(user_id, chat_id)
        try:
            await bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
            await bot.send_message(callback_query.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω")
            await bot.answer_callback_query(callback_query.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω")
        except Exception as e:
            await bot.answer_callback_query(callback_query.id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {type(e).__name__}, {str(e)}")

def get_ban_keyboard(user_id, chat_id):
    main_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text = "–ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_{user_id}_{chat_id}")]
    ],)
    return main_kb

@dp.message()
async def process_message(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    model_name = models.get(str(chat_id), "spamNS_large_v1")
    threshold = thresholds.get(str(chat_id), 10)

    if str(chat_id) not in user_messages:
        user_messages[str(chat_id)] = {}
    if str(user_id) not in user_messages[str(chat_id)]:
        user_messages[str(chat_id)][str(user_id)] = 0
    user_messages[str(chat_id)][str(user_id)] += 1
    save_data(USER_MESSAGES_DB, user_messages)

    if user_messages[str(chat_id)][str(user_id)] > threshold:
        return

    pred_average = is_spam(message.text, model_name=model_name)

    if pred_average:
        await message.delete()

        log_channel_id = log_channels.get(str(message.chat.id))
        if log_channel_id:
            keyboard = get_ban_keyboard(message.from_user.id, message.chat.id,)  # Use the get_ban_keyboard function
            await bot.send_message(log_channel_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username} —É–¥–∞–ª–µ–Ω–æ –≤ {message.chat.title}:\n\n{message.text}", reply_markup=keyboard)

async def main() -> None:
    print("Starting... ")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
