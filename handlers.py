import json
from utils import *
from aiogram import Dispatcher, types
import aiohttp
from aiogram.types import Message, CallbackQuery
from ruSpamLib import is_spam
import platform
import sys
from keyboard_utils import settings_keyboard
from aiogram.types import Message, InputFile
from io import BytesIO
from aiogram import Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import psutil
from ping3 import ping
from keyboard_utils import get_ban_keyboard
import logging
from logging.handlers import RotatingFileHandler
import re

logger = logging.getLogger()
logger.setLevel(logging.INFO)

original_messages = {}

formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

file_handler = RotatingFileHandler('bot_actions.log', maxBytes=1024*1024, backupCount=5, encoding='utf-8')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

sys.stdout.reconfigure(encoding='utf-8')

logger.info("Logging configured successfully with UTF-8 support!")
storage = MemoryStorage()

async def has_permission(message: types.Message) -> bool:
    user_id = message.from_user.id
    chat_member = await message.bot.get_chat_member(message.chat.id, user_id)
    return chat_member.status in ["creator", "administrator"]

async def is_group(message: Message):
    if not message.chat.type in ['group', 'supergroup']:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ.")
        return

def setup_handlers(dp: Dispatcher, bot, start_text, help_text):
    @dp.message_handler(lambda message: message.new_chat_members)
    async def on_new_chat_members(message: Message):
        for new_member in message.new_chat_members:
            if new_member.id == bot.id:
                chat_id = message.chat.id
                await initialize_chat_settings(chat_id)
            elif new_member.id in banlist:
                chat_id = message.chat.id
                await message.reply(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_member.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ. –û–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–ª–∞–º—â–∏–∫–æ–≤!")

    @dp.message_handler(commands=['send_logs'], is_admin = True)
    async def send_logs_command(message: Message):
        user_id = message.from_user.id
        if user_id in SPECIAL_USER_IDS:
            with open('bot_actions.log', 'rb') as file:
                await message.reply_document(InputFile(file, filename='bot_actions.log'))
            logger.info(f"–§–∞–π–ª –ª–æ–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}")
        else:
            await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤.")
            

    @dp.message_handler(commands=['dump_data'], is_admin = True)
    async def dump_data_command(message: Message):
        user_id = message.from_user.id
        if user_id not in SPECIAL_USER_IDS:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        data = {
            "thresholds": load_data(THRESHOLDS_DB),
            "user_messages": load_data(USER_MESSAGES_DB),
            "chat_settings": load_data(CHAT_SETTINGS_DB),
            "wrong_messages": load_data(WRONG_MESSAGES)
        }

        formatted_data = json.dumps(data, ensure_ascii=False, indent=4)

        file_buffer = BytesIO()
        file_buffer.write(formatted_data.encode('utf-8'))
        file_buffer.seek(0)

        await message.reply_document(InputFile(file_buffer, filename="dump_data.json"))

    @dp.message_handler(commands=['start'])
    async def process_start_command(message: Message):
        start_message = await message.answer(start_text, parse_mode='html')
        dp['start_message_id'] = start_message.message_id

    @dp.message_handler(commands=['info'], is_admin = True)
    async def process_info_command(message: Message):
        chat_id = message.chat.id
        threshold = thresholds.get(str(chat_id), 10)

        chat_settings = load_chat_settings().get(str(chat_id), {})

        mute_status = "–í–∫–ª—é—á–µ–Ω–æ" if chat_settings.get('mute', False) else "–í—ã–∫–ª—é—á–µ–Ω–æ"
        delete_message_status = "–í–∫–ª—é—á–µ–Ω–æ" if chat_settings.get('delete_message', False) else "–í—ã–∫–ª—é—á–µ–Ω–æ"
        ban_status = "–í–∫–ª—é—á–µ–Ω–æ" if chat_settings.get('ban', True) else "–í—ã–∫–ª—é—á–µ–Ω–æ"

        info_text = (
            f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã:</b> {message.chat.title}\n\n"
            f"<b>–ü–æ—Ä–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {threshold} ‚úâÔ∏è\n\n"
            f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π:</b>\n"
            f"–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {mute_status} ü§ê\n"
            f"–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_message_status} üóëÔ∏è\n"
            f"–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ban_status} üö´\n"
            f"<i>–í–µ—Ä—Å–∏—è: Lost Samurai 0.5</i>"
        )
        await message.reply(info_text, parse_mode='html', reply_markup=settings_keyboard(chat_id))

    @dp.message_handler(commands=['help'])
    async def process_help_command(message: Message):
        await message.answer(help_text, parse_mode='html')

    @dp.message_handler(commands=['me'])
    async def process_me_command(message: Message):
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        if str(chat_id) not in user_messages or str(user_id) not in user_messages[str(chat_id)]:
            await message.reply("–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ. üò¢")
            return
        
        message_count = user_messages[str(chat_id)][str(user_id)]
        rank = get_user_rank(message_count)
        
        if message.from_user.is_bot:
            rank = "–ë–æ—Ç ü§ñ"
        elif await has_permission(message):
            rank = "–ü—Ä–∞–≤–∏—Ç–µ–ª—å üëë"
        
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
                            f"ID: {user_id} üî¢\n"
                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count} üí¨\n"
                            f"–†–∞–Ω–≥: {rank}")

    @dp.message_handler(commands=['status'], is_admin = True)
    async def ping_handler(message: types.Message):
        google_ping_result = ping('google.com')
        telegram_ping_result = ping('149.154.167.40')
        
        google_ping_time = f"{google_ping_result * 1000:.2f} –º—Å" if google_ping_result is not None else "–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞"
        telegram_ping_time = f"{telegram_ping_result * 1000:.2f} –º—Å" if telegram_ping_result is not None else "–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞"

        cpu_usage = psutil.cpu_percent()
        memory_info = psutil.virtual_memory()
        disk_info = psutil.disk_usage('/')

        system_info = platform.uname()
        python_version = platform.python_version()
        num_cores = psutil.cpu_count(logical=True)
        uptime = os.popen('uptime -p').read().strip()

        battery = psutil.sensors_battery()
        
        if battery is not None:
            battery_status = battery.percent  
            battery_power_plugged = "–î–∞" if battery.power_plugged else "–ù–µ—Ç"
        else:
            battery_status = "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞—Ç–∞—Ä–µ–µ"
            battery_power_plugged = "N/A"

        response = (
            f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n"
            f"- –ü–∏–Ω–≥ –¥–æ Google: {google_ping_time} üïí\n"
            f"- –ü–∏–Ω–≥ –¥–æ Telegram: {telegram_ping_time} üïí\n"
            f"- –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_usage}% üñ•Ô∏è\n"
            f"- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_info.percent}% –∏–∑ {memory_info.total // (1024 ** 2)} –ú–ë üß†\n"
            f"- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_info.percent}% –∏–∑ {disk_info.total // (1024 ** 3)} –ì–ë üíæ\n"
            f"- –î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: {memory_info.available // (1024 ** 2)} –ú–ë üì¶\n"
            f"- –î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: {disk_info.free // (1024 ** 3)} –ì–ë üóÑÔ∏è\n"
            f"- –°–∏—Å—Ç–µ–º–∞: {system_info.system} {system_info.release} ({system_info.machine})\n"
            f"- Python –≤–µ—Ä—Å–∏—è: {python_version} üêç\n"
            f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä CPU: {num_cores} üñ•Ô∏è\n"
            f"- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞: {uptime} ‚è±Ô∏è\n"
            f"- –ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏: {battery_status}% üîã\n"
            f"- –ó–∞—Ä—è–¥–∫–∞: {battery_power_plugged} üîå"
        )

        await message.reply(response, parse_mode='Markdown')
    
    #@dp.message_handler(content_types=["new_chat_members"]) 
    #async def delete_new_chat_member_message(message: types.Message):
    # await bot.delete_message(message.chat.id, message.message_id)
    # print("—É–¥–∞–ª–µ–Ω–æ")


    @dp.message_handler(commands=['checkban'])
    async def check_ban_command(message: Message):
        args = message.get_args()

        if not args:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
            return

        user_id_to_check = args.strip()

        try:
            user_id_to_check_int = int(user_id_to_check)
        except ValueError:
            await message.reply("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        if user_id_to_check_int in banlist:
            await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_check} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å–ø–∞–º–µ—Ä–æ–≤!.")
        else:
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_check} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å–ø–∞–º–µ—Ä–æ–≤.")


    @dp.message_handler(commands=['updatebanlist'], is_admin = True)
    async def update_banlist_command(message: Message):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://lols.bot/spam/banlist.json') as resp:
                    if resp.status == 200:
                        banlist_data = await resp.json()
                        with open(BANLIST_DB, 'w') as f:
                            json.dump(banlist_data, f)
                        await message.reply("–°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
                        print("–ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                    else:
                        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL-–∞–¥—Ä–µ—Å.")
        except aiohttp.ClientError as e:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–æ–≤.")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–æ–≤: {e}")
            
    @dp.message_handler(commands=['setthreshold'], is_admin = True)
    async def process_setthreshold_command(message: Message):
        await is_group(message)

        chat_id = message.chat.id
        parts = message.text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setthreshold <–ø–æ—Ä–æ–≥>")
            return

        threshold = int(parts[1])
        thresholds[str(chat_id)] = threshold
        save_data(THRESHOLDS_DB, thresholds)
        await message.reply(f"–ü–æ—Ä–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {threshold}")

    @dp.message_handler(commands=['prof'], is_admin=True)
    async def handle_prof_command(message: types.Message):
        argument = message.get_args()
        if argument:
            text_to_check = message.text[len(message.text.split()[0]) + 1:]

            loading_message = await message.reply('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞...')

            is_spam_result, confidence = is_spam(message=text_to_check, model_name="spamNS_v6", multi_model=False)

            await loading_message.delete()

            if is_spam_result:
                await message.reply(f'‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞! –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}')
            else:
                await message.reply('‚úÖ –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∫–ª–∞–º—ã.')
        else:
            await message.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.')


    @dp.message_handler(commands=['ban'], is_admin=True)
    async def ban_user(message: types.Message):
        if not message.reply_to_message:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        
        user_to_ban = message.reply_to_message.from_user
        try:
            await message.chat.kick(user_to_ban.id)
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_ban.full_name} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
        except Exception as e:
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}")


    # @dp.message_handler(commands=['update_bot'])
    # async def process_update_bot_command(message: Message):
    #    await update_bot_command(message)

    @dp.callback_query_handler()
    async def process_callback_query(callback_query: CallbackQuery):
        data = callback_query.data

        user_id = callback_query.from_user.id
        chat_id = callback_query.message.chat.id

        chat_member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
                
        if data.startswith('ban_'):
            target_user_id, target_chat_id = map(int, data.split('_')[1:])
            if chat_member.status not in ['administrator', 'creator']:
                await bot.answer_callback_query(
                    callback_query.id,
                    text="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å!"
                )
                return
            try:
                chat_member = await bot.get_chat_member(chat_id=target_chat_id, user_id=target_user_id)
                if chat_member.status in ['administrator', 'creator']:
                    await bot.answer_callback_query(
                        callback_query.id,
                        text="–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞."
                    )
                    return
                
                banlist = load_data(BANLIST_DB)
                if target_user_id not in banlist:
                    banlist.append(target_user_id)
                    save_data(BANLIST_DB, banlist)

                await bot.ban_chat_member(chat_id=target_chat_id, user_id=target_user_id)
                
                await bot.delete_message(chat_id=chat_id, message_id=callback_query.message.message_id)
                await bot.answer_callback_query(callback_query.id, text="‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω!", show_alert=True)

            except Exception as e:
                await bot.answer_callback_query(callback_query.id,
                                                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {type(e).__name__}, {str(e)}", show_alert=True)
        elif data.startswith('toggle_'):
            setting = data.split('_')[1]
            print(setting)
            if setting == "delete":
                setting = "delete_message"
            elif setting == "notify":
                setting = "notification"

            chat_settings = load_chat_settings()

            if str(chat_id) not in chat_settings:
                chat_settings[str(chat_id)] = {}

            admins = await bot.get_chat_administrators(chat_id)
            admin_ids = [admin.user.id for admin in admins]

            if callback_query.from_user.id not in admin_ids:
                await bot.answer_callback_query(callback_query.id, text="–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True)
                return

            current_value = chat_settings[str(chat_id)].get(setting, False)
            chat_settings[str(chat_id)][setting] = not current_value
            save_chat_settings(chat_settings)

            await bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=callback_query.message.message_id,
                reply_markup=settings_keyboard(chat_id)
            )
            await bot.answer_callback_query(callback_query.id, text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{setting}' –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'‚úÖ' if not current_value else '‚ùå'}", show_alert=True)

        elif data.startswith("incorrect_"):
            target_user_id, target_chat_id = map(int, data.split('_')[1:])
            chat_member = await bot.get_chat_member(chat_id=target_chat_id, user_id=target_user_id)
            if chat_member.status not in ['administrator', 'creator']:
                await bot.answer_callback_query(
                    callback_query.id,
                    text="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!"
                )
                return
            
            with open(WRONG_MESSAGES, 'r', encoding='utf-8') as file:
                wrong_messages = json.load(file)

            wrong_messages.append({"user_id": user_id, "chat_id": chat_id, "message": callback_query.message.text})

            with open(WRONG_MESSAGES, 'w', encoding='utf-8') as file:
                json.dump(wrong_messages, file, ensure_ascii=False, indent=4)

            await bot.delete_message(chat_id=chat_id, message_id=callback_query.message.message_id)

    @dp.message_handler(commands=['setlog'], is_admin = True)
    async def log_channel(message: types.Message):
        log_id = message.text.split()[1]
        channel_name = message.chat.full_name
        add_log = add_log_channel(channel_name, log_id)
        if add_log == "log_id must be integer":
            await message.reply("–õ–æ–≥ –∞–π–¥–∏ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å —Å–µ–±—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –£–¥–æ—Å—Ç–æ–≤–µ—Ä—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è")
            return
        
        await message.reply(f"–õ–æ–≥ –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω  {log_id}")
        add_log_channel(channel_name, log_id)
        
       


    @dp.message_handler(commands=['id'], is_admin = True)
    async def print_chat_id(message: types.Message):
        chat_id = message.chat.id
        await message.reply(text=f"{chat_id}")
       

    @dp.message_handler()
    async def process_message(message: types.Message):
        original_messages[message.message_id] = message.text
        await handle_message(message)

    async def getting_data_from_json_by_key_meaning(dp_name, key):
            data = load_data(dp_name)
            meaning = data[key]
            return meaning




    @dp.edited_message_handler()
    async def process_edited_message(message: Message):
        original_text = original_messages.get(message.message_id, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await handle_message(message, edited=True, original_text=original_text)

     




    async def handle_message(message: Message, edited=False, original_text=None):
        pred_average = False
        chat_id = message.chat.id
        user_id = message.from_user.id
        threshold = thresholds.get(str(chat_id), 10)

        if str(chat_id) not in user_messages:
            user_messages[str(chat_id)] = {}
        if str(user_id) not in user_messages[str(chat_id)]:
            user_messages[str(chat_id)][str(user_id)] = 0
        user_messages[str(chat_id)][str(user_id)] += 1
        save_data(USER_MESSAGES_DB, user_messages)

        chat_settings = load_chat_settings().get(str(chat_id), {})

        url_pattern = re.compile(r"https?://\S+|www\.\S+")
        username_pattern = re.compile(r"@(\w+)")

        text_without_links_and_usernames = url_pattern.sub('', message.text).strip()
        text_without_links_and_usernames = username_pattern.sub('', text_without_links_and_usernames).strip()

        if username_pattern.fullmatch(message.text.strip()):
            return

        pred_average, confidence = is_spam(text_without_links_and_usernames, model_name="spamNS_v6")

        if pred_average and user_messages[str(chat_id)][str(user_id)] < threshold:
            keyboard = get_ban_keyboard(message.from_user.id, message.chat.id)

            if chat_settings.get('delete_message', False) and (not chat_settings.get('ban', True)) and (not chat_settings.get('mute', False)):
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                confidence_percent = int(confidence * 100)
            
                

                if edited and original_text:
                    await bot.send_message(
                        chat_id,
                        f"–ò–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –≤ {message.chat.title}:\n\n"
                        f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <tg-spoiler>{original_text}</tg-spoiler>\n"
                        f"–ò–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <tg-spoiler>{message.text}</tg-spoiler>\n"
                        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞: {confidence_percent}%",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    await bot.send_message(
                        chat_id,
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username} —É–¥–∞–ª–µ–Ω–æ –≤ {message.chat.title}:\n\n"
                        f"<tg-spoiler>{message.text}, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {confidence_percent}%</tg-spoiler>",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )

            log_id = await getting_data_from_json_by_key_meaning("log_channel.json", message.chat.full_name)
            try:
             if await has_permission(message) == False:
              if chat_settings.get('ban', True) and pred_average:
                print(log_id)
                
                await bot.send_message(chat_id=-1002266096303, text=f"[–õ–æ–≥] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ {message.chat.title} –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: <tg-spoiler>{message.text}</tg-spoiler>", parse_mode='html')
                await bot.send_message(chat_id=log_id, text=f"[–õ–æ–≥] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ {message.chat.title} –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: <tg-spoiler>{message.text}</tg-spoiler>", parse_mode='html')
                await bot.send_message(chat_id=message.chat.id, text=f"–ó–∞–¥–∞–Ω–Ω—ã–π –ª–æ–≥ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n<i>1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ –ª–æ–≥ –∫–∞–Ω–∞–ª–µ –µ—Å—Ç—å –±–æ—Ç –∏  —É –Ω–µ–≥–æ –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞.\n2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–ª–∏ chatID. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /id –≤ –ª–æ–≥ —á–∞—Ç–µ, –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏—Ç–µ id.</i>\n–ù–∞–¥–µ—é—Å—å –≤–∞–º —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç!", parse_mode='html')
                
                await bot.ban_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                


             if chat_settings.get('mute', False) and pred_average:
                await bot.send_message(chat_id=-1002266096303, text=f"[–õ–æ–≥] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –±—ã–ª –∑–∞–º—É—á–µ–Ω –≤ {message.chat.title} –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: <tg-spoiler>{message.text}</tg-spoiler>", parse_mode='html')
                await bot.send_message(chat_id=log_id, text=f"[–õ–æ–≥] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –≤ {message.chat.title} –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: <tg-spoiler>{message.text}</tg-spoiler>", parse_mode='html')
                await bot.restrict_chat_member(chat_id=message.chat.id, user_id=message.from_user.id, can_send_messages=False)
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            
             else:
                await bot.send_message(chat_id=log_id, text=f"[–ª–æ–≥] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ: <tg-spoiler>{message.text}</tg-spoiler>", parse_mode='html')
                await bot.send_message(chat_id=-1002266096303, text=f"[–ª–æ–≥] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ: <tg-spoiler>{message.text}</tg-spoiler>", parse_mode='html')

            except:
                 await bot.send_message(chat_id=message.chat.id, text=f"–ó–∞–¥–∞–Ω–Ω—ã–π –ª–æ–≥ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n<i>1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ –ª–æ–≥ –∫–∞–Ω–∞–ª–µ –µ—Å—Ç—å –±–æ—Ç –∏  —É –Ω–µ–≥–æ –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞.\n2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–ª–∏ chatID. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å /id –≤ –ª–æ–≥ —á–∞—Ç–µ, –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏—Ç–µ id.</i>\n–ù–∞–¥–µ—é—Å—å –≤–∞–º —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç!", parse_mode='html')